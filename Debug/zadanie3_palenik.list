
zadanie3_palenik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001198  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001320  08001320  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001320  08001320  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001320  08001320  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001320  08001320  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001320  08001320  00011320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001324  08001324  00011324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000020  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 14 .debug_info   000031d2  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000d04  00000000  00000000  0002324d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003f8  00000000  00000000  00023f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002db  00000000  00000000  00024350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000143df  00000000  00000000  0002462b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003690  00000000  00000000  00038a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0006de98  00000000  00000000  0003c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000f04  00000000  00000000  000a9f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  000aae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001308 	.word	0x08001308

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08001308 	.word	0x08001308

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000316:	4a14      	ldr	r2, [pc, #80]	; (8000368 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	f003 0303 	and.w	r3, r3, #3
 800031e:	3302      	adds	r3, #2
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	0c1b      	lsrs	r3, r3, #16
 8000328:	43db      	mvns	r3, r3
 800032a:	ea02 0103 	and.w	r1, r2, r3
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	0c1b      	lsrs	r3, r3, #16
 8000332:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	fa93 f3a3 	rbit	r3, r3
 800033a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	fab3 f383 	clz	r3, r3
 8000342:	b2db      	uxtb	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	fa03 f202 	lsl.w	r2, r3, r2
 800034c:	4806      	ldr	r0, [pc, #24]	; (8000368 <LL_SYSCFG_SetEXTISource+0x5c>)
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	f003 0303 	and.w	r3, r3, #3
 8000354:	430a      	orrs	r2, r1
 8000356:	3302      	adds	r3, #2
 8000358:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800035c:	bf00      	nop
 800035e:	3714      	adds	r7, #20
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40010000 	.word	0x40010000

0800036c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800036c:	b480      	push	{r7}
 800036e:	b089      	sub	sp, #36	; 0x24
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	fa93 f3a3 	rbit	r3, r3
 8000386:	613b      	str	r3, [r7, #16]
  return result;
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	fab3 f383 	clz	r3, r3
 800038e:	b2db      	uxtb	r3, r3
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	2103      	movs	r1, #3
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	43db      	mvns	r3, r3
 800039a:	401a      	ands	r2, r3
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a0:	69fb      	ldr	r3, [r7, #28]
 80003a2:	fa93 f3a3 	rbit	r3, r3
 80003a6:	61bb      	str	r3, [r7, #24]
  return result;
 80003a8:	69bb      	ldr	r3, [r7, #24]
 80003aa:	fab3 f383 	clz	r3, r3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	6879      	ldr	r1, [r7, #4]
 80003b4:	fa01 f303 	lsl.w	r3, r1, r3
 80003b8:	431a      	orrs	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	3724      	adds	r7, #36	; 0x24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003ca:	b480      	push	{r7}
 80003cc:	b089      	sub	sp, #36	; 0x24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	60f8      	str	r0, [r7, #12]
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	68da      	ldr	r2, [r3, #12]
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	fa93 f3a3 	rbit	r3, r3
 80003e4:	613b      	str	r3, [r7, #16]
  return result;
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	fab3 f383 	clz	r3, r3
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	2103      	movs	r1, #3
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	401a      	ands	r2, r3
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	fa93 f3a3 	rbit	r3, r3
 8000404:	61bb      	str	r3, [r7, #24]
  return result;
 8000406:	69bb      	ldr	r3, [r7, #24]
 8000408:	fab3 f383 	clz	r3, r3
 800040c:	b2db      	uxtb	r3, r3
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	6879      	ldr	r1, [r7, #4]
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	431a      	orrs	r2, r3
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	60da      	str	r2, [r3, #12]
}
 800041c:	bf00      	nop
 800041e:	3724      	adds	r7, #36	; 0x24
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800044a:	f107 031c 	add.w	r3, r7, #28
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
 8000464:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000466:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800046a:	f7ff ff37 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 800046e:	2110      	movs	r1, #16
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f7ff ffd8 	bl	8000428 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 8000478:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff ff45 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_PULL_UP);
 8000482:	2201      	movs	r2, #1
 8000484:	2108      	movs	r1, #8
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f7ff ff9e 	bl	80003ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_MODE_INPUT);
 800048e:	2200      	movs	r2, #0
 8000490:	2108      	movs	r1, #8
 8000492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000496:	f7ff ff69 	bl	800036c <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800049a:	2308      	movs	r3, #8
 800049c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004a2:	2301      	movs	r3, #1
 80004a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004a8:	2300      	movs	r3, #0
 80004aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80004ae:	2302      	movs	r3, #2
 80004b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80004b4:	f107 031c 	add.w	r3, r7, #28
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 fc3d 	bl	8000d38 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80004be:	2310      	movs	r3, #16
 80004c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004c2:	2301      	movs	r3, #1
 80004c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4619      	mov	r1, r3
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 fe22 	bl	8001122 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80004de:	f7ff fe73 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fec3 	bl	8000274 <NVIC_EncodePriority>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4619      	mov	r1, r3
 80004f2:	2009      	movs	r0, #9
 80004f4:	f7ff fe94 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80004f8:	2009      	movs	r0, #9
 80004fa:	f7ff fe73 	bl	80001e4 <__NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3728      	adds	r7, #40	; 0x28
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <__NVIC_SetPriorityGrouping>:
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <__NVIC_SetPriorityGrouping+0x44>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800051e:	68ba      	ldr	r2, [r7, #8]
 8000520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000524:	4013      	ands	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800053a:	4a04      	ldr	r2, [pc, #16]	; (800054c <__NVIC_SetPriorityGrouping+0x44>)
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	60d3      	str	r3, [r2, #12]
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <__NVIC_GetPriorityGrouping>:
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <__NVIC_GetPriorityGrouping+0x18>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	f003 0307 	and.w	r3, r3, #7
}
 800055e:	4618      	mov	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <__NVIC_SetPriority>:
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	db0a      	blt.n	8000596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	b2da      	uxtb	r2, r3
 8000584:	490c      	ldr	r1, [pc, #48]	; (80005b8 <__NVIC_SetPriority+0x4c>)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	0112      	lsls	r2, r2, #4
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	440b      	add	r3, r1
 8000590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000594:	e00a      	b.n	80005ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4908      	ldr	r1, [pc, #32]	; (80005bc <__NVIC_SetPriority+0x50>)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f003 030f 	and.w	r3, r3, #15
 80005a2:	3b04      	subs	r3, #4
 80005a4:	0112      	lsls	r2, r2, #4
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	440b      	add	r3, r1
 80005aa:	761a      	strb	r2, [r3, #24]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000e100 	.word	0xe000e100
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <NVIC_EncodePriority>:
{
 80005c0:	b480      	push	{r7}
 80005c2:	b089      	sub	sp, #36	; 0x24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	f1c3 0307 	rsb	r3, r3, #7
 80005da:	2b04      	cmp	r3, #4
 80005dc:	bf28      	it	cs
 80005de:	2304      	movcs	r3, #4
 80005e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3304      	adds	r3, #4
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	d902      	bls.n	80005f0 <NVIC_EncodePriority+0x30>
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3b03      	subs	r3, #3
 80005ee:	e000      	b.n	80005f2 <NVIC_EncodePriority+0x32>
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	f04f 32ff 	mov.w	r2, #4294967295
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43da      	mvns	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	401a      	ands	r2, r3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000608:	f04f 31ff 	mov.w	r1, #4294967295
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43d9      	mvns	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	4313      	orrs	r3, r2
}
 800061a:	4618      	mov	r0, r3
 800061c:	3724      	adds	r7, #36	; 0x24
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LL_RCC_HSI_Enable+0x1c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <LL_RCC_HSI_Enable+0x1c>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <LL_RCC_HSI_IsReady+0x20>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	2b02      	cmp	r3, #2
 8000656:	bf0c      	ite	eq
 8000658:	2301      	moveq	r3, #1
 800065a:	2300      	movne	r3, #0
 800065c:	b2db      	uxtb	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000

0800066c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4904      	ldr	r1, [pc, #16]	; (8000694 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000682:	4313      	orrs	r3, r2
 8000684:	600b      	str	r3, [r1, #0]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <LL_RCC_SetSysClkSource+0x24>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	f023 0203 	bic.w	r2, r3, #3
 80006a8:	4904      	ldr	r1, [pc, #16]	; (80006bc <LL_RCC_SetSysClkSource+0x24>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	604b      	str	r3, [r1, #4]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000

080006c0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <LL_RCC_GetSysClkSource+0x18>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f003 030c 	and.w	r3, r3, #12
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000

080006dc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LL_RCC_SetAHBPrescaler+0x24>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006ec:	4904      	ldr	r1, [pc, #16]	; (8000700 <LL_RCC_SetAHBPrescaler+0x24>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	604b      	str	r3, [r1, #4]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000

08000704 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <LL_RCC_SetAPB1Prescaler+0x24>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000714:	4904      	ldr	r1, [pc, #16]	; (8000728 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4313      	orrs	r3, r2
 800071a:	604b      	str	r3, [r1, #4]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40021000 	.word	0x40021000

0800072c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800073c:	4904      	ldr	r1, [pc, #16]	; (8000750 <LL_RCC_SetAPB2Prescaler+0x24>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4313      	orrs	r3, r2
 8000742:	604b      	str	r3, [r1, #4]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000

08000754 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <LL_APB1_GRP1_EnableClock+0x2c>)
 800075e:	69da      	ldr	r2, [r3, #28]
 8000760:	4907      	ldr	r1, [pc, #28]	; (8000780 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <LL_APB1_GRP1_EnableClock+0x2c>)
 800076a:	69da      	ldr	r2, [r3, #28]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4013      	ands	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	40021000 	.word	0x40021000

08000784 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800078e:	699a      	ldr	r2, [r3, #24]
 8000790:	4907      	ldr	r1, [pc, #28]	; (80007b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4313      	orrs	r3, r2
 8000796:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800079a:	699a      	ldr	r2, [r3, #24]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4013      	ands	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	40021000 	.word	0x40021000

080007b4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <LL_FLASH_SetLatency+0x24>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f023 0207 	bic.w	r2, r3, #7
 80007c4:	4904      	ldr	r1, [pc, #16]	; (80007d8 <LL_FLASH_SetLatency+0x24>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	600b      	str	r3, [r1, #0]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40022000 	.word	0x40022000

080007dc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <LL_FLASH_GetLatency+0x18>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f003 0307 	and.w	r3, r3, #7
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40022000 	.word	0x40022000

080007f8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4013      	ands	r3, r2
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	bf0c      	ite	eq
 800080e:	2301      	moveq	r3, #1
 8000810:	2300      	movne	r3, #0
 8000812:	b2db      	uxtb	r3, r3
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	40010400 	.word	0x40010400

08000824 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6153      	str	r3, [r2, #20]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40010400 	.word	0x40010400

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff ff9b 	bl	8000784 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800084e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000852:	f7ff ff7f 	bl	8000754 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000856:	2003      	movs	r0, #3
 8000858:	f7ff fe56 	bl	8000508 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800085c:	f7ff fe78 	bl	8000550 <__NVIC_GetPriorityGrouping>
 8000860:	4603      	mov	r3, r0
 8000862:	2200      	movs	r2, #0
 8000864:	210f      	movs	r1, #15
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff feaa 	bl	80005c0 <NVIC_EncodePriority>
 800086c:	4603      	mov	r3, r0
 800086e:	4619      	mov	r1, r3
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f7ff fe7a 	bl	800056c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f858 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f7ff fde2 	bl	8000444 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(toggle_led == 1){
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <main+0x84>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d1fb      	bne.n	8000880 <main+0x3c>
		  if(!(LED_GPIO_Port->ODR & (1 << LED_PIN_POS))){
 8000888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10b      	bne.n	80008ae <main+0x6a>
			  LED_GPIO_Port->BSRR |= (1 << LED_PIN_POS);
 8000896:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6193      	str	r3, [r2, #24]
			  toggle_led = 0;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <main+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	e7e8      	b.n	8000880 <main+0x3c>
		  }
		  else{
			  LED_GPIO_Port->BRR |= (1 << LED_PIN_POS);
 80008ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008b8:	f043 0310 	orr.w	r3, r3, #16
 80008bc:	6293      	str	r3, [r2, #40]	; 0x28
			  toggle_led = 0;
 80008be:	4b02      	ldr	r3, [pc, #8]	; (80008c8 <main+0x84>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
	  if(toggle_led == 1){
 80008c4:	e7dc      	b.n	8000880 <main+0x3c>
 80008c6:	bf00      	nop
 80008c8:	20000025 	.word	0x20000025

080008cc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	while(!toggle_led){
 80008d0:	e018      	b.n	8000904 <EXTI3_IRQHandler+0x38>
		edge = edgeDetect(BUTTON_GET_STATE, SAMPLE_COUNT);
 80008d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2105      	movs	r1, #5
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f854 	bl	8000990 <edgeDetect>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <EXTI3_IRQHandler+0x58>)
 80008ee:	701a      	strb	r2, [r3, #0]
		if(edge == FALL){
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <EXTI3_IRQHandler+0x58>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d102      	bne.n	80008fe <EXTI3_IRQHandler+0x32>
			toggle_led = 1;
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <EXTI3_IRQHandler+0x5c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
		}
		LL_mDelay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f000 fca8 	bl	8001254 <LL_mDelay>
	while(!toggle_led){
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <EXTI3_IRQHandler+0x5c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d0e2      	beq.n	80008d2 <EXTI3_IRQHandler+0x6>
	}

  /* USER CODE END EXTI3_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 800090c:	2008      	movs	r0, #8
 800090e:	f7ff ff73 	bl	80007f8 <LL_EXTI_IsActiveFlag_0_31>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <EXTI3_IRQHandler+0x52>
	{
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8000918:	2008      	movs	r0, #8
 800091a:	f7ff ff83 	bl	8000824 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
	}
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000000 	.word	0x20000000
 8000928:	20000025 	.word	0x20000025

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff3f 	bl	80007b4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000936:	bf00      	nop
 8000938:	f7ff ff50 	bl	80007dc <LL_FLASH_GetLatency>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1fa      	bne.n	8000938 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000942:	f7ff fe71 	bl	8000628 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000946:	bf00      	nop
 8000948:	f7ff fe7e 	bl	8000648 <LL_RCC_HSI_IsReady>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d1fa      	bne.n	8000948 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000952:	2010      	movs	r0, #16
 8000954:	f7ff fe8a 	bl	800066c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff febf 	bl	80006dc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff fed0 	bl	8000704 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fee1 	bl	800072c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fe94 	bl	8000698 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000970:	bf00      	nop
 8000972:	f7ff fea5 	bl	80006c0 <LL_RCC_GetSysClkSource>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1fa      	bne.n	8000972 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <SystemClock_Config+0x60>)
 800097e:	f000 fc5b 	bl	8001238 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000982:	4802      	ldr	r0, [pc, #8]	; (800098c <SystemClock_Config+0x60>)
 8000984:	f000 fc8c 	bl	80012a0 <LL_SetSystemCoreClock>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	007a1200 	.word	0x007a1200

08000990 <edgeDetect>:

/* USER CODE BEGIN 4 */
EDGE_TYPE edgeDetect(uint8_t pin_state, uint8_t samples)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	4613      	mov	r3, r2
 800099e:	71bb      	strb	r3, [r7, #6]
	if(pin_state && !previous_state){
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d00a      	beq.n	80009bc <edgeDetect+0x2c>
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <edgeDetect+0x70>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d106      	bne.n	80009bc <edgeDetect+0x2c>
		previous_state = 1;
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <edgeDetect+0x70>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
		count = 0;
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <edgeDetect+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	e01a      	b.n	80009f2 <edgeDetect+0x62>
	}
	else if(!pin_state && count < samples){
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d117      	bne.n	80009f2 <edgeDetect+0x62>
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <edgeDetect+0x74>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	79ba      	ldrb	r2, [r7, #6]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d912      	bls.n	80009f2 <edgeDetect+0x62>
		previous_state = 0;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <edgeDetect+0x70>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
		count++;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <edgeDetect+0x74>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <edgeDetect+0x74>)
 80009dc:	701a      	strb	r2, [r3, #0]
		if(count == samples){
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <edgeDetect+0x74>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	79ba      	ldrb	r2, [r7, #6]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d104      	bne.n	80009f2 <edgeDetect+0x62>
			count = 0;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <edgeDetect+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
			return FALL;
 80009ee:	2303      	movs	r3, #3
 80009f0:	e000      	b.n	80009f4 <edgeDetect+0x64>
		}
	}
	return NONE;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	20000001 	.word	0x20000001
 8000a04:	20000024 	.word	0x20000024

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff ffea 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	; (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f000 fc05 	bl	80012c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fec5 	bl	8000844 <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000abc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000ac8:	08001328 	.word	0x08001328
  ldr r2, =_sbss
 8000acc:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000ad0:	20000028 	.word	0x20000028

08000ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_2_IRQHandler>
	...

08000ad8 <LL_EXTI_EnableIT_0_31>:
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4904      	ldr	r1, [pc, #16]	; (8000af8 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	600b      	str	r3, [r1, #0]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40010400 	.word	0x40010400

08000afc <LL_EXTI_EnableIT_32_63>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x20>)
 8000b06:	6a1a      	ldr	r2, [r3, #32]
 8000b08:	4904      	ldr	r1, [pc, #16]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x20>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	620b      	str	r3, [r1, #32]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40010400 	.word	0x40010400

08000b20 <LL_EXTI_DisableIT_0_31>:
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <LL_EXTI_DisableIT_0_31+0x24>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	4904      	ldr	r1, [pc, #16]	; (8000b44 <LL_EXTI_DisableIT_0_31+0x24>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	600b      	str	r3, [r1, #0]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40010400 	.word	0x40010400

08000b48 <LL_EXTI_DisableIT_32_63>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <LL_EXTI_DisableIT_32_63+0x24>)
 8000b52:	6a1a      	ldr	r2, [r3, #32]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	4904      	ldr	r1, [pc, #16]	; (8000b6c <LL_EXTI_DisableIT_32_63+0x24>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	620b      	str	r3, [r1, #32]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40010400 	.word	0x40010400

08000b70 <LL_EXTI_EnableEvent_0_31>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	4904      	ldr	r1, [pc, #16]	; (8000b90 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	604b      	str	r3, [r1, #4]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40010400 	.word	0x40010400

08000b94 <LL_EXTI_EnableEvent_32_63>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ba0:	4904      	ldr	r1, [pc, #16]	; (8000bb4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40010400 	.word	0x40010400

08000bb8 <LL_EXTI_DisableEvent_0_31>:
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <LL_EXTI_DisableEvent_0_31+0x24>)
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	4904      	ldr	r1, [pc, #16]	; (8000bdc <LL_EXTI_DisableEvent_0_31+0x24>)
 8000bca:	4013      	ands	r3, r2
 8000bcc:	604b      	str	r3, [r1, #4]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40010400 	.word	0x40010400

08000be0 <LL_EXTI_DisableEvent_32_63>:
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	4904      	ldr	r1, [pc, #16]	; (8000c04 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40010400 	.word	0x40010400

08000c08 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	4904      	ldr	r1, [pc, #16]	; (8000c28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	608b      	str	r3, [r1, #8]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40010400 	.word	0x40010400

08000c2c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c38:	4904      	ldr	r1, [pc, #16]	; (8000c4c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40010400 	.word	0x40010400

08000c50 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	4904      	ldr	r1, [pc, #16]	; (8000c74 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	608b      	str	r3, [r1, #8]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40010400 	.word	0x40010400

08000c78 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	4904      	ldr	r1, [pc, #16]	; (8000c9c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	4904      	ldr	r1, [pc, #16]	; (8000cc0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60cb      	str	r3, [r1, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd0:	4904      	ldr	r1, [pc, #16]	; (8000ce4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	60cb      	str	r3, [r1, #12]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40010400 	.word	0x40010400

08000d10 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	4904      	ldr	r1, [pc, #16]	; (8000d34 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40010400 	.word	0x40010400

08000d38 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7a1b      	ldrb	r3, [r3, #8]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80cc 	beq.w	8000ee6 <LL_EXTI_Init+0x1ae>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d061      	beq.n	8000e1a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7a5b      	ldrb	r3, [r3, #9]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d01c      	beq.n	8000d98 <LL_EXTI_Init+0x60>
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	dc25      	bgt.n	8000dae <LL_EXTI_Init+0x76>
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <LL_EXTI_Init+0x34>
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d00b      	beq.n	8000d82 <LL_EXTI_Init+0x4a>
 8000d6a:	e020      	b.n	8000dae <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff21 	bl	8000bb8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff feac 	bl	8000ad8 <LL_EXTI_EnableIT_0_31>
          break;
 8000d80:	e018      	b.n	8000db4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff feca 	bl	8000b20 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff feed 	bl	8000b70 <LL_EXTI_EnableEvent_0_31>
          break;
 8000d96:	e00d      	b.n	8000db4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fe9b 	bl	8000ad8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fee2 	bl	8000b70 <LL_EXTI_EnableEvent_0_31>
          break;
 8000dac:	e002      	b.n	8000db4 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
          break;
 8000db2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7a9b      	ldrb	r3, [r3, #10]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d02e      	beq.n	8000e1a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7a9b      	ldrb	r3, [r3, #10]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d01c      	beq.n	8000dfe <LL_EXTI_Init+0xc6>
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	dc25      	bgt.n	8000e14 <LL_EXTI_Init+0xdc>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d002      	beq.n	8000dd2 <LL_EXTI_Init+0x9a>
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d00b      	beq.n	8000de8 <LL_EXTI_Init+0xb0>
 8000dd0:	e020      	b.n	8000e14 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff86 	bl	8000ce8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff11 	bl	8000c08 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000de6:	e018      	b.n	8000e1a <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff2f 	bl	8000c50 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff52 	bl	8000ca0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000dfc:	e00d      	b.n	8000e1a <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff00 	bl	8000c08 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff47 	bl	8000ca0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000e12:	e002      	b.n	8000e1a <LL_EXTI_Init+0xe2>
          default:
            status = ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
            break;
 8000e18:	bf00      	nop
        }
      }
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d075      	beq.n	8000f0e <LL_EXTI_Init+0x1d6>
    {
      switch (EXTI_InitStruct->Mode)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7a5b      	ldrb	r3, [r3, #9]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d01c      	beq.n	8000e64 <LL_EXTI_Init+0x12c>
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	dc25      	bgt.n	8000e7a <LL_EXTI_Init+0x142>
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <LL_EXTI_Init+0x100>
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d00b      	beq.n	8000e4e <LL_EXTI_Init+0x116>
 8000e36:	e020      	b.n	8000e7a <LL_EXTI_Init+0x142>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fecf 	bl	8000be0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe58 	bl	8000afc <LL_EXTI_EnableIT_32_63>
          break;
 8000e4c:	e018      	b.n	8000e80 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fe78 	bl	8000b48 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fe99 	bl	8000b94 <LL_EXTI_EnableEvent_32_63>
          break;
 8000e62:	e00d      	b.n	8000e80 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe47 	bl	8000afc <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fe8e 	bl	8000b94 <LL_EXTI_EnableEvent_32_63>
          break;
 8000e78:	e002      	b.n	8000e80 <LL_EXTI_Init+0x148>
        default:
          status = ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
          break;
 8000e7e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7a9b      	ldrb	r3, [r3, #10]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d042      	beq.n	8000f0e <LL_EXTI_Init+0x1d6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7a9b      	ldrb	r3, [r3, #10]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d01c      	beq.n	8000eca <LL_EXTI_Init+0x192>
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	dc25      	bgt.n	8000ee0 <LL_EXTI_Init+0x1a8>
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d002      	beq.n	8000e9e <LL_EXTI_Init+0x166>
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d00b      	beq.n	8000eb4 <LL_EXTI_Init+0x17c>
 8000e9c:	e020      	b.n	8000ee0 <LL_EXTI_Init+0x1a8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff34 	bl	8000d10 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff febd 	bl	8000c2c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000eb2:	e02c      	b.n	8000f0e <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fedd 	bl	8000c78 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fefe 	bl	8000cc4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000ec8:	e021      	b.n	8000f0e <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff feac 	bl	8000c2c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fef3 	bl	8000cc4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000ede:	e016      	b.n	8000f0e <LL_EXTI_Init+0x1d6>
          default:
            status = ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
            break;
 8000ee4:	e013      	b.n	8000f0e <LL_EXTI_Init+0x1d6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fe18 	bl	8000b20 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fe5f 	bl	8000bb8 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fe22 	bl	8000b48 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fe69 	bl	8000be0 <LL_EXTI_DisableEvent_32_63>
#endif
  }
  return status;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <LL_GPIO_SetPinMode>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	613b      	str	r3, [r7, #16]
  return result;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2103      	movs	r1, #3
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	401a      	ands	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	61bb      	str	r3, [r7, #24]
  return result;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fab3 f383 	clz	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	431a      	orrs	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_GPIO_SetPinOutputType>:
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	fb01 f303 	mul.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	605a      	str	r2, [r3, #4]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_GPIO_SetPinSpeed>:
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b089      	sub	sp, #36	; 0x24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	613b      	str	r3, [r7, #16]
  return result;
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	fab3 f383 	clz	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2103      	movs	r1, #3
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	61bb      	str	r3, [r7, #24]
  return result;
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	609a      	str	r2, [r3, #8]
}
 8000ff8:	bf00      	nop
 8000ffa:	3724      	adds	r7, #36	; 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_GPIO_SetPinPull>:
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	613b      	str	r3, [r7, #16]
  return result;
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	fab3 f383 	clz	r3, r3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2103      	movs	r1, #3
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	61bb      	str	r3, [r7, #24]
  return result;
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fab3 f383 	clz	r3, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	431a      	orrs	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	60da      	str	r2, [r3, #12]
}
 8001056:	bf00      	nop
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <LL_GPIO_SetAFPin_0_7>:
{
 8001062:	b480      	push	{r7}
 8001064:	b089      	sub	sp, #36	; 0x24
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6a1a      	ldr	r2, [r3, #32]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	613b      	str	r3, [r7, #16]
  return result;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	210f      	movs	r1, #15
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	401a      	ands	r2, r3
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa93 f3a3 	rbit	r3, r3
 800109c:	61bb      	str	r3, [r7, #24]
  return result;
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	fab3 f383 	clz	r3, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	431a      	orrs	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	621a      	str	r2, [r3, #32]
}
 80010b4:	bf00      	nop
 80010b6:	3724      	adds	r7, #36	; 0x24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_GPIO_SetAFPin_8_15>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	0a1b      	lsrs	r3, r3, #8
 80010d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	fa93 f3a3 	rbit	r3, r3
 80010dc:	613b      	str	r3, [r7, #16]
  return result;
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	fab3 f383 	clz	r3, r3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	210f      	movs	r1, #15
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	401a      	ands	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	61bb      	str	r3, [r7, #24]
  return result;
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	431a      	orrs	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b088      	sub	sp, #32
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	613b      	str	r3, [r7, #16]
  return result;
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001144:	e051      	b.n	80011ea <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2101      	movs	r1, #1
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d043      	beq.n	80011e4 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d003      	beq.n	800116c <LL_GPIO_Init+0x4a>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d10e      	bne.n	800118a <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	461a      	mov	r2, r3
 8001172:	69b9      	ldr	r1, [r7, #24]
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff16 	bl	8000fa6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	6819      	ldr	r1, [r3, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	461a      	mov	r2, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fef6 	bl	8000f76 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	461a      	mov	r2, r3
 8001190:	69b9      	ldr	r1, [r7, #24]
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff36 	bl	8001004 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d11a      	bne.n	80011d6 <LL_GPIO_Init+0xb4>
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	60bb      	str	r3, [r7, #8]
  return result;
 80011ac:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b07      	cmp	r3, #7
 80011b6:	d807      	bhi.n	80011c8 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	461a      	mov	r2, r3
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff4e 	bl	8001062 <LL_GPIO_SetAFPin_0_7>
 80011c6:	e006      	b.n	80011d6 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	461a      	mov	r2, r3
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff75 	bl	80010c0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	461a      	mov	r2, r3
 80011dc:	69b9      	ldr	r1, [r7, #24]
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fe9a 	bl	8000f18 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3301      	adds	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1a6      	bne.n	8001146 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <LL_InitTick+0x30>)
 8001218:	3b01      	subs	r3, #1
 800121a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <LL_InitTick+0x30>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <LL_InitTick+0x30>)
 8001224:	2205      	movs	r2, #5
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e010 	.word	0xe000e010

08001238 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001240:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ffdd 	bl	8001204 <LL_InitTick>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <LL_mDelay+0x48>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001262:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126a:	d00c      	beq.n	8001286 <LL_mDelay+0x32>
  {
    Delay++;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3301      	adds	r3, #1
 8001270:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001272:	e008      	b.n	8001286 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <LL_mDelay+0x48>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <LL_mDelay+0x32>
    {
      Delay--;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f3      	bne.n	8001274 <LL_mDelay+0x20>
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <LL_SetSystemCoreClock+0x1c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000004 	.word	0x20000004

080012c0 <__libc_init_array>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	4d0d      	ldr	r5, [pc, #52]	; (80012f8 <__libc_init_array+0x38>)
 80012c4:	4c0d      	ldr	r4, [pc, #52]	; (80012fc <__libc_init_array+0x3c>)
 80012c6:	1b64      	subs	r4, r4, r5
 80012c8:	10a4      	asrs	r4, r4, #2
 80012ca:	2600      	movs	r6, #0
 80012cc:	42a6      	cmp	r6, r4
 80012ce:	d109      	bne.n	80012e4 <__libc_init_array+0x24>
 80012d0:	4d0b      	ldr	r5, [pc, #44]	; (8001300 <__libc_init_array+0x40>)
 80012d2:	4c0c      	ldr	r4, [pc, #48]	; (8001304 <__libc_init_array+0x44>)
 80012d4:	f000 f818 	bl	8001308 <_init>
 80012d8:	1b64      	subs	r4, r4, r5
 80012da:	10a4      	asrs	r4, r4, #2
 80012dc:	2600      	movs	r6, #0
 80012de:	42a6      	cmp	r6, r4
 80012e0:	d105      	bne.n	80012ee <__libc_init_array+0x2e>
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80012e8:	4798      	blx	r3
 80012ea:	3601      	adds	r6, #1
 80012ec:	e7ee      	b.n	80012cc <__libc_init_array+0xc>
 80012ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80012f2:	4798      	blx	r3
 80012f4:	3601      	adds	r6, #1
 80012f6:	e7f2      	b.n	80012de <__libc_init_array+0x1e>
 80012f8:	08001320 	.word	0x08001320
 80012fc:	08001320 	.word	0x08001320
 8001300:	08001320 	.word	0x08001320
 8001304:	08001324 	.word	0x08001324

08001308 <_init>:
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130a:	bf00      	nop
 800130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130e:	bc08      	pop	{r3}
 8001310:	469e      	mov	lr, r3
 8001312:	4770      	bx	lr

08001314 <_fini>:
 8001314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001316:	bf00      	nop
 8001318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800131a:	bc08      	pop	{r3}
 800131c:	469e      	mov	lr, r3
 800131e:	4770      	bx	lr
